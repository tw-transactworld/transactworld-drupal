<?php
/**
 * @file
 * transactworld module for Drupal Commerce.
 */

/**
 * Administration forms form payment method.
 */
function commerce_transactworld_settings_form($settings = NULL) {
  $form = array();
  $settings = (array) $settings + array(
   // 'totype' => '',
    'toid' => '',
	'partenerid' => '',
	'ipaddr' => '',
    'pctype' => '',
    'paymenttype' => '',
    'cardtype' => '',
    'reservedField1' => '',
    'reservedField2' => '',
    'working_key' => '',
    'totype' => '',
    'test_url' => '',
    'live_url' => '',
    'transactworld_server' => '',
	'email' => '',
	
  );

  $form['toid'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant id'),
    '#default_value' => $settings['toid'],
    '#required' => TRUE,
  );
  
  
  $form['partenerid'] = array(
    '#type' => 'textfield',
    '#title' => t('Partner id'),
    '#default_value' => $settings['partenerid'],
    '#required' => TRUE,
  );
  
  $form['ipaddr'] = array(
    '#type' => 'textfield',
    '#title' => t('Ip address id'),
    '#default_value' => $settings['ipaddr'],
    '#required' => TRUE,
  );
  

  $form['working_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Working key'),
    '#default_value' => $settings['working_key'],
    '#required' => TRUE,
  );

  $form['totype'] = array(
    '#type' => 'textfield',
    '#title' => t('Partner Name'), 
    '#default_value' => $settings['totype'],
    '#required' => TRUE,
  );

  $form['transactworld_server'] = array(
    '#type' => 'select',
    '#title' => t('Payment Mode'),
    '#description' => t('The Available list of transactworld Servers'),
    '#options' => array(
	  $settings['live_url'] => ('Live'),
	  $settings['test_url'] => ('Test'),
	 ),
    '#default_value' => $settings['transactworld_server'],
  );
  
  $form['test_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Test url'), 
    '#default_value' => $settings['test_url'],
    '#required' => TRUE,
  );
  
  $form['live_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Live url'), 
    '#default_value' => $settings['live_url'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Register payment mehtod.
 */
function commerce_transactworld_commerce_payment_method_info() {
  $icon = _commerce_transactworld_icons();
  $display_title = t('TransactWorld'); 
  $payment_methods = array();
  $payment_methods['commerce_transactworld'] = array(
    'title' => t("Pay securely with transactworld"), 
    'display_title' => $display_title,
    'short_title' => 'transactworld',
    'description' => t("Payment method for transactworld"),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );
  return $payment_methods;
}

/**
 * Ask for transactworld redirect form.
 */
function commerce_transactworld_redirect_form($form, $form_state, $order, $payment_method){
  
  $wrapper = entity_metadata_wrapper('commerce_order', $order);   
  $billing_address = $wrapper->commerce_customer_billing->commerce_customer_address->value(); // print_r($billing_address); exit;
  // Get financial info.
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  
  /****************************************************************************/
  
  $country_code = array(
					"AF"=>"093", 
					"AX"=>"358", 
					"AL"=>"355",
					"DZ"=>"231",
					"AS"=>"684",
					"AD"=>"376",
					"AO"=>"244",
					"AI"=>"001",
					"AQ"=>"000",
					"AG"=>"001",
					"AR"=>"054",
					"AM"=>"374",
					"AW"=>"297",
					"AU"=>"061",
					"AT"=>"043",
					"AZ"=>"994",
					"BS"=>"001",
					"BH"=>"973",
					"BD"=>"880",
					"BB"=>"001",
					"BY"=>"375",
					"BE"=>"032",
					"BZ"=>"501",
					"BJ"=>"229",
					"BM"=>"001",
					"BT"=>"975",
					"BO"=>"591",
					"BA"=>"387",
					"BW"=>"267",
					"BV"=>"000",
					"BR"=>"055",
					"IO"=>"246",
					"VG"=>"001",
					"BN"=>"673",
					"BG"=>"359",
					"BF"=>"226",
					"BI"=>"257",
					"KH"=>"855",
					"CM"=>"237",
					"CA"=>"001",
					"CV"=>"238",
					"KY"=>"001",
					"CF"=>"236",
					"TD"=>"235",
					"CL"=>"056",
					"CN"=>"086",
					"CX"=>"061",
					"CC"=>"061",
					"CC"=>"061",
					"CO"=>"057",
					"KM"=>"269",
					"CK"=>"682",
					"CR"=>"506",
					"CI"=>"225",
					"HR"=>"385",
					"CU"=>"053",
					"CY"=>"357",
					"CZ"=>"420",
					"CD"=>"243",
					"DK"=>"045",
					"DJ"=>"253",
					"DM"=>"001",
					"DO"=>"001",
					"EC"=>"593",
					"EG"=>"020",
					"SV"=>"503",
					"GQ"=>"240",
					"ER"=>"291",
					"EE"=>"372",
					"ET"=>"251",
					"FK"=>"500",
					"FO"=>"298",
					"FJ"=>"679",
					"FI"=>"358",
					"FR"=>"033",
					"GF"=>"594",
					"PF"=>"689",
					"TF"=>"000",
					"GA"=>"241",
					"GM"=>"220",
					"GE"=>"995",
					"DE"=>"049",
					"GH"=>"233",
					"GI"=>"350",
					"GR"=>"030",
					"GL"=>"299",
					"GD"=>"001",
					"GP"=>"590",
					"GU"=>"001",
					"GT"=>"502",
					"GG"=>"000",
					"GN"=>"224",
					"GW"=>"245",
					"GY"=>"592",
					"HT"=>"509",
					"HM"=>"672",
					"HN"=>"504",
					"HK"=>"852",
					"HU"=>"036",
					"IS"=>"354",
					"IN"=>"091",
					"ID"=>"062",
					"IR"=>"098",
					"IQ"=>"964",
					"IE"=>"353",
					"IL"=>"972",
					"IT"=>"039",
					"JM"=>"001",
					"JP"=>"081",
					"JE"=>"044",
					"JO"=>"962",
					"KZ"=>"007",
					"KE"=>"254",
					"KI"=>"686",
					"KW"=>"965",
					"KG"=>"996",
					"LA"=>"856",
					"LV"=>"371",
					"LB"=>"961",
					"LS"=>"266",
					"LR"=>"231",
					"LY"=>"218",
					"LI"=>"423",
					"LT"=>"370",
					"LU"=>"352",
					"MO"=>"853",
					"MK"=>"389",
					"MG"=>"261",
					"MW"=>"265",
					"MY"=>"060",
					"MV"=>"960",
					"ML"=>"223",
					"MT"=>"356",
					"MH"=>"692",
					"MQ"=>"596",
					"MR"=>"222",
					"MU"=>"230",
					"YT"=>"269",
					"MX"=>"052",
					"FM"=>"691",
					"MD"=>"373",
					"MC"=>"377",
					"MN"=>"976",
					"ME"=>"382",
					"MS"=>"001",
					"MA"=>"212",
					"MZ"=>"258",
					"MM"=>"095",
					"NA"=>"264",
					"NR"=>"674",
					"NP"=>"977",
					"AN"=>"599",
					"NL"=>"031",
					"NC"=>"687",
					"NZ"=>"064",
					"NI"=>"505",
					"NE"=>"227",
					"NG"=>"234",
					"NU"=>"683",
					"NF"=>"672",
					"KP"=>"850",
					"MP"=>"001",
					"NO"=>"047",
					"OM"=>"968",
					"PK"=>"092",
					"PW"=>"680",
					"PS"=>"970",
					"PA"=>"507",
					"PG"=>"675",
					"PY"=>"595",
					"PE"=>"051",
					"PH"=>"063",
					"PN"=>"064",
					"PL"=>"048",
					"PT"=>"351",
					"PR"=>"001",
					"QA"=>"974",
					"CG"=>"242",
					"RE"=>"262",
					"RO"=>"040",
					"RU"=>"007",
					"RW"=>"250",
					"BL"=>"590",
					"SH"=>"290",
					"KN"=>"001",
					"LC"=>"001",
					"MF"=>"590",
					"PM"=>"508",
					"VC"=>"001",
					"WS"=>"685",
					"SM"=>"378",
					"ST"=>"239",
					"SA"=>"966",
					"SN"=>"221",
					"RS"=>"381",
					"SC"=>"248",
					"SL"=>"232",
					"SG"=>"065",
					"SK"=>"421",
					"SI"=>"386",
					"SB"=>"677",
					"SO"=>"252",
					"ZA"=>"027",
					"GS"=>"000",
					"KR"=>"082",
					"ES"=>"034",
					"LK"=>"094",
					"SD"=>"249",
					"SR"=>"597",
					"SJ"=>"047",
					"SZ"=>"268",
					"SE"=>"046",
					"CH"=>"041",
					"SY"=>"963",
					"TW"=>"886",
					"TJ"=>"992",
					"TZ"=>"255",
					"TH"=>"066",
					"TL"=>"670",
					"TG"=>"228",
					"TK"=>"690",
					"TO"=>"676",
					"TT"=>"001",
					"TN"=>"216",
					"TR"=>"090",
					"TM"=>"993",
					"TC"=>"001",
					"TV"=>"688",
					"UG"=>"256",
					"UA"=>"380",
					"AE"=>"971",
					"GB"=>"044",
					"US"=>"001",
					"VI"=>"001",
					"UY"=>"598",
					"UZ"=>"998",
					"VU"=>"678",
					"VA"=>"379",
					"VE"=>"058",
					"VN"=>"084",
					"WF"=>"681",
					"EH"=>"212",
					"YE"=>"967",
					"ZM"=>"260",
					"ZW"=>"263"
					);
  /****************************************************************************/
  
  
  // billing address starts here 
  $order_data = array(
    'amount' => $wrapper->commerce_order_total->amount->value() / 100,
    'order_id' => $order->order_id,
    'cancel_url' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'redirect_url' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'working_key' => $payment_method['settings']['working_key'],
    'language' => 'EN',
    'currency' => $currency_code,
    'billing_name' => $billing_address['name_line'],
    'billing_address' => $billing_address['thoroughfare']. ' ' . $billing_address['premise'] . ' ' . $billing_address['sub_premise'],
    'billing_zip' => $billing_address['postal_code'],
    'billing_city' => $billing_address['locality'],
	'email' => $order->mail,
    $country_value = $country_code[$billing_address['country']],
    'telnocc' => $country_value,
    'billing_state' => $billing_address['administrative_area'],
    'billing_country' => $billing_address['country'],
  );
  $u_email = $order_data['email'];
  
  
 $form['totype'] = array(
  	'#type' => 'hidden',
  	'#attributes' => array('name' => 'totype'),
  	'#value' => $payment_method['settings']['totype'],
  );
 
  $form['toid'] = array(
  	'#type' => 'hidden',
  	'#attributes' => array('name' => 'toid'),
  	'#value' => $payment_method['settings']['toid'],
  );
  
  
   $form['partenerid'] = array(
  	'#type' => 'hidden',
  	'#attributes' => array('name' => 'partenerid'),
  	'#value' => $payment_method['settings']['partenerid'],
  );
  
  
   $form['ipaddr'] = array(
  	'#type' => 'hidden',
  	'#attributes' => array('name' => 'ipaddr'),
  	'#value' => $payment_method['settings']['ipaddr'],
  );
  
  
  $form['pctype'] = array(
  	'#type' => 'hidden',
  	'#attributes' => array('name' => 'pctype'),
  	'#value' => '1_1|1_2',
  );
  
  
   $form['amount'] = array(
  	'#type' => 'hidden',
  	'#attributes' => array('name' => 'amount'),
  	'#value' => number_format((float)$wrapper->commerce_order_total->amount->value() / 100, 2, '.', ''),
  );
  $form['description'] = array(
  	'#type' => 'hidden',
  	'#attributes' => array('name' => 'description'),
  	'#value' => $order->order_id,
  ); 
  $form['redirecturl'] = array(
  	'#type' => 'hidden',
  	'#attributes' => array('name' => 'redirecturl'),
  	'#value' =>url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
  );  
  
  
  // Address fields starts here 
$form['TMPL_street'] = array(
'#type' => 'hidden',
'#value' => $billing_address['thoroughfare']. ' ' . $billing_address['premise'] . ' ' . $billing_address['sub_premise'],
);
$form['TMPL_COUNTRY'] = array(
'#type' => 'hidden',
'#value' => $billing_address['country'], 
);

$form['email'] = array(
'#type' => 'hidden',
'#value' => $u_email, 
);

$form['telnocc'] = array(
'#type' => 'hidden',
'#value' => $country_value, 
);

$form['TMPL_state'] = array(
'#type' => 'hidden',
'#value' => $billing_address['administrative_area'],
);
$form['TMPL_city'] = array(
'#type' => 'hidden',
'#value' => $billing_address['locality'],
);
$form['TMPL_zip'] = array(
'#type' => 'hidden',
'#value' => $billing_address['postal_code'],
);
  
  // Address fields ends here 
  
  $checksum = MD5(trim($payment_method['settings']['toid']) . "|" . trim( $payment_method['settings']['totype']) . "|" . trim(number_format((float)$wrapper->commerce_order_total->amount->value() / 100, 2, '.', '')) . "|" . trim($order->order_id) . "|" .url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)). "|" . trim($payment_method['settings']['working_key']));
  $form['checksum'] = array(
  	'#type' => 'hidden',
  	'#attributes' => array('name' => 'checksum'),
  	'#value' =>$checksum,
  );
  $form['TMPL_CURRENCY'] = array(
  	'#type' => 'hidden',
  	'#attributes' => array('name' => 'TMPL_CURRENCY'),
  	'#value' =>'USD',
  );
  $form['TMPL_AMOUNT'] = array(
  	'#type' => 'hidden',
  	'#attributes' => array('name' => 'TMPL_AMOUNT'),
  	'#value' =>$wrapper->commerce_order_total->amount->value() / 100,
  );  
  
 
  $form['#action'] = $payment_method['settings']['transactworld_server'];
  return $form;  
}



/**
 * Implements hook_redirect_form_validate().
 */


function commerce_transactworld_redirect_form_validate($order, $payment_method) {
  $working_key = $payment_method['settings']['working_key'];
  
  // This is the response sent by the transactworld Server.
  $trackingId = $_REQUEST["trackingid"];
  $desc = $_REQUEST["desc"];
  $amount = $_REQUEST["amount"];
  $status = $_REQUEST["status"];
  $message = t('Security error ip Address was: @ip', array('@ip' => ip_address()));
  if ($status === "Y") {
    commerce_transactworld_transaction($order, $payment_method, $status);
    commerce_order_status_update($order, 'processing');
    return drupal_set_message(t('Thank you for shopping with us. Your account has been charged and your transaction is successful.'));
    
    // Here you need to put in the routines for a successful.
    // Transaction such as sending an email to customer.
    // Setting database status, informing logistics etc etc.
  }
  elseif ($status === "P") {
    commerce_transactworld_transaction($order, $payment_method, $status);
    commerce_order_status_update($order, 'pending');
    return drupal_set_message(('Thank you for shopping with us.We will keep you posted regarding the status of your order through e-mail'));
    // This is for payment American Express Card payment only.
    // American Express authorisation status is available only after 5-6.
  }
  elseif ($status === "N") {
    commerce_transactworld_transaction($order, $payment_method, $status);
    commerce_order_status_update($order, 'canceled');
    return drupal_set_message(t('Thank you for shopping with us.However,the transaction has been declined.'));
    // Here you need to put in the routines for a failed.
    // Transaction such as sending an email to customer.
    // Setting database status etc etc.
  }
  else {
    watchdog('commerce_transactworld', $message, NULL, WATCHDOG_ERROR);
    return drupal_set_message(t('Security Error. Illegal access detected. We will store your IP address.'), ERROR);
  }
}
/**
 * transactworld finish payment
 */
function commerce_transactworld_transaction($order, $payment_method, $order_status) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  $transaction = commerce_payment_transaction_new('commerce_transactworld', $order->order_id);
  $transaction->instance_id = isset($payment_method['instance_id']) ? $payment_method['instance_id'] : '';
  $transaction->amount = $amount;
  $transaction->currency_code = $currency;
  // Succeessful.
  if($order_status === "Y") {
    $transaction->remote_status = t('Success');
    $transaction->message = t('Payment received at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }
  elseif($order_status === "P"){
    // Batch process - Aborted orders.
    $transaction->remote_status = t('Aborted');
    $transaction->message = t('Payment pending at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  }
  elseif($order_status === "N"){
    // Failed transaction.
    $transaction->remote_status = t('Failure');
    $transaction->message = t('Payment failed at') . ' ' . date("d-m-Y H:i:s", REQUEST_TIME);
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  commerce_payment_transaction_save($transaction);
}

/**
 * Get checksum.
 */
function _commerce_transactworld_encrypt($plain_text, $key) {
  $secret_key = _commerce_transactworld_hextobin(md5($key));
  $init_vector = pack("C*", 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f);
  $open_mode = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', 'cbc', '');
  $block_size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, 'cbc');
  $plain_pad = _commerce_transactworld_pkcs5_pad($plain_text, $block_size);
  if (mcrypt_generic_init($open_mode, $secret_key, $init_vector) != -1) {
    $encrypted_text = mcrypt_generic($open_mode, $plain_pad);
    mcrypt_generic_deinit($open_mode);
  }
  return bin2hex($encrypted_text);
 }

/**
 * Get checksum.
 */
function _commerce_transactworld_decrypt($encrypted_text, $key) {
  $secret_key = _commerce_transactworld_hextobin(md5($key));
  $init_vector = pack("C*", 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f);
  $encrypted_text = _commerce_transactworld_hextobin($encrypted_text);
  $open_mode = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', 'cbc', '');
  mcrypt_generic_init($open_mode, $secret_key, $init_vector);
  $decrypted_text = mdecrypt_generic($open_mode, $encrypted_text);
  $decrypted_text = rtrim($decrypted_text, "\0");
  mcrypt_generic_deinit($open_mode);
  return $decrypted_text;
 }

function _commerce_transactworld_pkcs5_pad($plain_text, $block_size) {
  $pad = $block_size - (strlen($plain_text) % $block_size);
  return $plain_text . str_repeat(chr($pad), $pad);
 }
/**
 * Create helper function called _commerce_transactworld_leftshift.
 */
function _commerce_transactworld_hextobin($hex_string) {
  $length = strlen($hex_string);
  $bin_string = '';
  $count = 0;
  while($count < $length) {
    $sub_string = substr($hex_string, $count, 2);
    $packed_string = pack("H*", $sub_string);
    if ($count == 0) {
      $bin_string = $packed_string;
    }
    else {
      $bin_string .= $packed_string;
    }
    $count += 2;
  }
  return $bin_string;
}
/**
 * Returns transactworld icon image location.
 */
function _commerce_transactworld_icons() {
  $variable = array(
    'path' => drupal_get_path('module', 'commerce_transactworld') . '/images/' . 'transactworld_home_logo.png',
    'title' => 'transactworld',
    'alt' => 'transactworld',
    'attributes' => array(
      'class' => array('commerce-transactworld-icon'),
    ),
  );
  return theme('image', $variable);
}
